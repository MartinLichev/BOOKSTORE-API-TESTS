<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="31" passed="31" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-09-21T14:44:09 EEST" name="Bookstore API Regression" finished-at="2025-09-21T14:44:16 EEST" duration-ms="6677">
    <groups>
    </groups>
    <test started-at="2025-09-21T14:44:09 EEST" name="API" finished-at="2025-09-21T14:44:16 EEST" duration-ms="6677">
      <class name="com.example.bookstore.api.tests.ActivitiesApiTests">
        <test-method signature="createActivity_returns200AndEchoesPayload()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:13 EEST" name="createActivity_returns200AndEchoesPayload" finished-at="2025-09-21T14:44:14 EEST" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createActivity_returns200AndEchoesPayload -->
        <test-method is-config="true" signature="init()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:13 EEST" name="init" finished-at="2025-09-21T14:44:13 EEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method is-config="true" signature="configure()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:13 EEST" name="configure" finished-at="2025-09-21T14:44:13 EEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configure -->
        <test-method signature="deleteActivity_returns200()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:14 EEST" name="deleteActivity_returns200" finished-at="2025-09-21T14:44:14 EEST" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteActivity_returns200 -->
        <test-method signature="getActivityById_existing_returns200()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:14 EEST" name="getActivityById_existing_returns200" finished-at="2025-09-21T14:44:14 EEST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getActivityById_existing_returns200 -->
        <test-method signature="getActivityById_notFound_returns404()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:14 EEST" name="getActivityById_notFound_returns404" finished-at="2025-09-21T14:44:14 EEST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getActivityById_notFound_returns404 -->
        <test-method signature="getAllActivities_returns200AndNonEmptyList()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:14 EEST" name="getAllActivities_returns200AndNonEmptyList" finished-at="2025-09-21T14:44:14 EEST" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllActivities_returns200AndNonEmptyList -->
        <test-method signature="updateActivity_returns200()[pri:0, instance:com.example.bookstore.api.tests.ActivitiesApiTests@3cebbb30]" started-at="2025-09-21T14:44:14 EEST" name="updateActivity_returns200" finished-at="2025-09-21T14:44:14 EEST" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateActivity_returns200 -->
      </class> <!-- com.example.bookstore.api.tests.ActivitiesApiTests -->
      <class name="com.example.bookstore.api.tests.BooksApiTests">
        <test-method is-config="true" signature="configure()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:09 EEST" name="configure" finished-at="2025-09-21T14:44:09 EEST" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configure -->
        <test-method is-config="true" signature="init()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:09 EEST" name="init" finished-at="2025-09-21T14:44:09 EEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="createBook_returns200AndEchoesPayload()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:09 EEST" name="createBook_returns200AndEchoesPayload" finished-at="2025-09-21T14:44:10 EEST" duration-ms="1099" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBook_returns200AndEchoesPayload -->
        <test-method signature="deleteBook_returns200()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:10 EEST" name="deleteBook_returns200" finished-at="2025-09-21T14:44:11 EEST" duration-ms="196" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBook_returns200 -->
        <test-method signature="getAllBooks_returns200AndNonEmptyList()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:11 EEST" name="getAllBooks_returns200AndNonEmptyList" finished-at="2025-09-21T14:44:11 EEST" duration-ms="499" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllBooks_returns200AndNonEmptyList -->
        <test-method signature="getBookById_existing_returns200()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:11 EEST" name="getBookById_existing_returns200" finished-at="2025-09-21T14:44:12 EEST" duration-ms="435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBookById_existing_returns200 -->
        <test-method signature="getBookById_notFound_returns404()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:12 EEST" name="getBookById_notFound_returns404" finished-at="2025-09-21T14:44:12 EEST" duration-ms="424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBookById_notFound_returns404 -->
        <test-method signature="updateBook_returns200AndBodyMatchesPayload()[pri:0, instance:com.example.bookstore.api.tests.BooksApiTests@550dbc7a]" started-at="2025-09-21T14:44:12 EEST" name="updateBook_returns200AndBodyMatchesPayload" finished-at="2025-09-21T14:44:12 EEST" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateBook_returns200AndBodyMatchesPayload -->
      </class> <!-- com.example.bookstore.api.tests.BooksApiTests -->
      <class name="com.example.bookstore.api.tests.UsersApiTests">
        <test-method is-config="true" signature="configure()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:15 EEST" name="configure" finished-at="2025-09-21T14:44:15 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configure -->
        <test-method signature="createUser_returns200AndEchoesPayload()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:15 EEST" name="createUser_returns200AndEchoesPayload" finished-at="2025-09-21T14:44:15 EEST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser_returns200AndEchoesPayload -->
        <test-method is-config="true" signature="init()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:15 EEST" name="init" finished-at="2025-09-21T14:44:15 EEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="deleteUser_returns200()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:15 EEST" name="deleteUser_returns200" finished-at="2025-09-21T14:44:15 EEST" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser_returns200 -->
        <test-method signature="getAllUsers_returns200AndNonEmptyList()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:15 EEST" name="getAllUsers_returns200AndNonEmptyList" finished-at="2025-09-21T14:44:15 EEST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllUsers_returns200AndNonEmptyList -->
        <test-method signature="getUserById_existing_returns200()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:15 EEST" name="getUserById_existing_returns200" finished-at="2025-09-21T14:44:16 EEST" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserById_existing_returns200 -->
        <test-method signature="getUserById_notFound_returns404()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:16 EEST" name="getUserById_notFound_returns404" finished-at="2025-09-21T14:44:16 EEST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserById_notFound_returns404 -->
        <test-method signature="updateUser_returns200()[pri:0, instance:com.example.bookstore.api.tests.UsersApiTests@290222c1]" started-at="2025-09-21T14:44:16 EEST" name="updateUser_returns200" finished-at="2025-09-21T14:44:16 EEST" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateUser_returns200 -->
      </class> <!-- com.example.bookstore.api.tests.UsersApiTests -->
      <class name="com.example.bookstore.api.tests.CoverPhotosApiTests">
        <test-method is-config="true" signature="configure()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:14 EEST" name="configure" finished-at="2025-09-21T14:44:14 EEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configure -->
        <test-method is-config="true" signature="init()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:14 EEST" name="init" finished-at="2025-09-21T14:44:14 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="createCoverPhoto_returns200AndEchoesPayload()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:14 EEST" name="createCoverPhoto_returns200AndEchoesPayload" finished-at="2025-09-21T14:44:14 EEST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCoverPhoto_returns200AndEchoesPayload -->
        <test-method signature="deleteCoverPhoto_returns200()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:14 EEST" name="deleteCoverPhoto_returns200" finished-at="2025-09-21T14:44:14 EEST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteCoverPhoto_returns200 -->
        <test-method signature="getAllCoverPhotos_returns200AndNonEmptyList()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:14 EEST" name="getAllCoverPhotos_returns200AndNonEmptyList" finished-at="2025-09-21T14:44:15 EEST" duration-ms="177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllCoverPhotos_returns200AndNonEmptyList -->
        <test-method signature="getCoverPhotoById_existing_returns200()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:15 EEST" name="getCoverPhotoById_existing_returns200" finished-at="2025-09-21T14:44:15 EEST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCoverPhotoById_existing_returns200 -->
        <test-method signature="getCoverPhotosByBookId_returns200()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:15 EEST" name="getCoverPhotosByBookId_returns200" finished-at="2025-09-21T14:44:15 EEST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCoverPhotosByBookId_returns200 -->
        <test-method signature="updateCoverPhoto_returns200()[pri:0, instance:com.example.bookstore.api.tests.CoverPhotosApiTests@12aba8be]" started-at="2025-09-21T14:44:15 EEST" name="updateCoverPhoto_returns200" finished-at="2025-09-21T14:44:15 EEST" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCoverPhoto_returns200 -->
      </class> <!-- com.example.bookstore.api.tests.CoverPhotosApiTests -->
      <class name="com.example.bookstore.api.tests.AuthorsApiTests">
        <test-method is-config="true" signature="configure()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:12 EEST" name="configure" finished-at="2025-09-21T14:44:12 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configure -->
        <test-method signature="createAuthor_returns200AndEchoesPayload()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:12 EEST" name="createAuthor_returns200AndEchoesPayload" finished-at="2025-09-21T14:44:12 EEST" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAuthor_returns200AndEchoesPayload -->
        <test-method is-config="true" signature="init()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:12 EEST" name="init" finished-at="2025-09-21T14:44:12 EEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="deleteAuthor_returns200()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:12 EEST" name="deleteAuthor_returns200" finished-at="2025-09-21T14:44:13 EEST" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteAuthor_returns200 -->
        <test-method signature="getAllAuthors_returns200AndNonEmptyList()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:13 EEST" name="getAllAuthors_returns200AndNonEmptyList" finished-at="2025-09-21T14:44:13 EEST" duration-ms="211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAuthors_returns200AndNonEmptyList -->
        <test-method signature="getAuthorById_existing_returns200()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:13 EEST" name="getAuthorById_existing_returns200" finished-at="2025-09-21T14:44:13 EEST" duration-ms="159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAuthorById_existing_returns200 -->
        <test-method signature="getAuthorById_notFound_returns404()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:13 EEST" name="getAuthorById_notFound_returns404" finished-at="2025-09-21T14:44:13 EEST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAuthorById_notFound_returns404 -->
        <test-method signature="getAuthorsByBookId_returns200()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:13 EEST" name="getAuthorsByBookId_returns200" finished-at="2025-09-21T14:44:13 EEST" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAuthorsByBookId_returns200 -->
        <test-method signature="updateAuthor_returns200()[pri:0, instance:com.example.bookstore.api.tests.AuthorsApiTests@1e1a0406]" started-at="2025-09-21T14:44:13 EEST" name="updateAuthor_returns200" finished-at="2025-09-21T14:44:13 EEST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAuthor_returns200 -->
      </class> <!-- com.example.bookstore.api.tests.AuthorsApiTests -->
    </test> <!-- API -->
  </suite> <!-- Bookstore API Regression -->
</testng-results>
